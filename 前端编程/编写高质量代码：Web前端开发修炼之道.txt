第1章 从网站重构说起
	1.1 糟糕的页面实现，头疼的维护工作
	1.2 Web标准-结构、样式和行为的分离
	1.3 前端的现状
	1.4 打造高品质的前端代码，提高代码的可维护性-精简、重用、有序
第2章 团队合作
	2.1 揭秘前端开发工程师
	2.2 欲精一行，必先通十行
	2.3 增加代码可读性-注释
	2.4 提高重用性-公共组件和私有组件的维护
	2.5 冗余和精简的矛盾-选择集中还是选择分散
	2.6 磨刀不误砍柴工-前期的构思很重要
	2.7 制订规范
	2.8 团队合作的最大难度不是技术，是人
第3章 高质量的HTML
	3.1 标签的语义
	3.2 为什么要使用语义化标签
	3.3 如何确定你的标签是否语义良好
	3.4 常见模块你真的很了解吗
		3.4.1 标题和内容
		3.4.2 表单
		3.4.3 表格
		3.4.4 语义化标签应注意的一些其他问题
第4章 高质量的CSS4
	4.1 怪异模式和DTD
	4.2 如何组织CSS
	4.3 推荐的base.css
	4.4 模块化CSS-在CSS中引入面向对象编程思想
		4.4.1 如何划分模块-单一职责
		4.4.2 CSS的命名-命名空间的概念
		4.4.3 挂多个class还是新建class-多用组合，少用继承
		4.4.4 如何处理上下margin
	4.5 低权重原则-避免滥用子选择器
	4.6 CSS sprite
	4.7 CSS的常见问题
		4.7.1 CSS的编码风格
		4.7.2 id和class
		4.7.3 CSS hack
		4.7.4 解决超链接访问后hover样式不出现的问题
		4.7.5 hasLayout4
		4.7.6 块级元素和行内元素的区别
		4.7.7 display: inline-block和hasLayout7
		4.7.8 relative、absolute和float3
		4.7.9 居中4
		4.7.10 网格布局
		4.7.11 z-index的相关问题以及Flash和IE6下的select元素
		4.7.12 插入png图片
		4.7.13 多版本IE并存方案-CSS的调试利器IETester
第5章 高质量的JavaScript
	5.1 养成良好的编程习惯
		5.1.1 团队合作-如何避免JS冲突
		5.1.2 给程序一个统一的入口-window.onload和DOMReady
		5.1.3 CSS放在页头，JavaScript放在页尾
		5.1.4 引入编译的概念-文件压缩
	5.2 JavaScript的分层概念和JavaScript库
		5.2.1 JavaScript如何分层
		5.2.2 base层3
		5.2.3 common层
		5.2.4 page层4
		5.2.5 JavaScript库
	5.3 编程实用技巧7
		5.3.1 弹性7
		5.3.2 getElementById、getElementsByTagName和getElements-ByClassName3
		5.3.3 可复用性
		5.3.4 避免产生副作用9
		5.3.5 通过传参实现定制3
		5.3.6 控制this关键字的指向7
		5.3.7 预留回调接口
		5.3.8 编程中的DRY规则
		5.3.9 用hash对象传参
	5.4 面向对象编程
		5.4.1 面向过程编程和面向对象编程
		5.4.2 JavaScript的面向对象编程
		5.4.3 用面向对象方式重写代码
	5.5 其他问题
		5.5.1 prototype和内置类
		5.5.2 标签的自定义属性
		5.5.3 标签的内联事件和event对象
		5.5.4 利用事件冒泡机制
		5.5.5 改变DOM样式的三种方式
附录A 写在规则前面的话
附录B 命名规则
附录C 分工安排
附录D 注释规则
附录E HTML规范
附录F CSS规范
附录G JavaScript规范